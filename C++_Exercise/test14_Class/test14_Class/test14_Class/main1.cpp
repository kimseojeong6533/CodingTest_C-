#include <iostream>

using namespace std;   
//c++은 객체지향프로그래밍언어임. 
/*객체지향프로그래밍(OOP) : 조립식(부품을 미리 만들어놓고, 그 부품들을 연결시키는 방식의 프로그래밍) 
					        객체들의 관계를 설정해주어서, 부품을 조립하듯이, 객체를 조립하여 프로그램을 만드는 방식.
	객체 : 모든사물, C++에서 모든변수를 객체라고 표현할 수 있음. but, 객체지향 프로그래밍을 지원하기위해 
		   제공되는 수단은 Class(클래스그자체도 생성한 변수 즉, instance(=변수))임. Class는 객체를 만들기위한 틀.

	클래스 선언방법 : Class 클래스명{};
					  코드블럭안에 멤버변수를 넣어줄 수 있음, 단, 함수도 멤버로 만들 수 있음.
					  (구조체안의 변수들 : 멤버변수, 구조체또는 클래스안에 소속되어 있는 함수 : 멤버함수)
		   
	클래스의 4가지 속성 : 
	 1. 캡슐화 : 클래스안에 속하는 하나의 변수, 함수들을 하나의 클래스로 묶어주는 기능
	 2. 은닉화 : 클래스안에 속하는 변수 혹은 함수를 내가 원하는 부분만 외부에 공개하거나 공개하지 않을 수 있음
				 -public : 클래스 내외부에서 모두 접근가능한 키워드(구조체의 defqult : public )
				 -protected : 클래스외부에서는 접근이 불가능하고 자신내부나, 자식클래스내부에서는 접근가능한 키워드.
				 -private : 자기자신내부에서만 접근이 가능하고, 외부나 자식클래스내부에서는 접근이 불가능한 키워드.
	 3. 상속성 : 클래스는 클래스와 클래스간에 부모,자식관계를 형성할 수 있음.
				 -자식클래스는 부모클래스의 멤버를 물려받아 자기것처럼 사용가능(단, private으로 되어 있는 멤버에는 접근불가)
	 4. 다형성 : 부모, 자식관계로 상속관계가 형성되어 있는 클래스간에 서로 형변환이 가능한 성질 
				  -자식을 부모타입으로 형변환 : up casting
				  -부모를 자식타입으로 형변환 : down casting

	생성자와 소멸자 : 
		-생성자 : 어떤 클래스를 이용해서 객체를 생성할때 자동으로 호출되는 함수이다. 객체 생성시, 호출되는 함수이기 때문에 
			      객체의 멤버변수를 초기화할때 유용하게 사용가능.
				  생성자를 만들어 주지 않을 경우, 내부적으로 기본생성자가 제공되어서 기본생성자를 자동으로 호출해주게 된다.
				  형태 :  클래스명(){}의 형태로 선언됨.
		
		-소멸자 :  어떤 클래스를 이용해서 생성한 객체가 메모리에서 해제될 때(지역변수, delete),자동으로 호출되는 함수
				   객체를 사용하고 난뒤, 마무리작업을 할때 유용하게 사용할 수 있음. 
					~클래스명(){}의 형태
*/

class CTracer 
{

	
public : 
	//생성자
	CTracer() {
		cout << "Tracer 생성자" << endl;  //클래스외부에서 CTracer라는 클래스에 접근되었을 때, 생성자가 호출되어 Tracer생성자가 출력됨.
		strcpy_s(m_strName, "트레이서");					  

	}
	CTracer(const char* pName) {
		strcpy_s(m_strName, pName);
	}

	CTracer(const char *pName, int iFlash, int iBack) :
		m_iBack(iBack)   //이니셜라이저 ( 생성자(인수,인수..) : 멤버변수(인수 중 하나) ) 를 이용한 멤버변수 선언 및 초기화
	{
		strcpy_s(m_strName, pName);
		m_iFlash = iFlash;
	}

	//소멸자
	~CTracer() {                          //클래스외부에서 CTracer라는 클래스에 접근후 메모리 해제시, 소멸자가 호출되어 
										  //Tracer소멸자가 출력됨.
		cout << "Tracer 소멸자" << endl;
		

	}//생성자는 보통 public으로 선언해줌, 생성자소멸자는 클래스명과 똑같이 해주어야함.
	


	//클래스 멤버변수를 선언할때는 m_을 붙여주는게 조흠
	char m_strName[32];  //default 값이 private이므로 클래스외부(메인함수, 다른 함수등)에서 접근불가
	
 //아래 멤버변수들은 모두 클래스외부에서 접근가능 
public : 
	int m_iAttack;
	int m_iHp;
	int m_iBack;

  //아래 멤버변수들은 모두 클래스외부에서 접근불가 
private : 
	int m_iFlash;


public :
	void Output()  //public으로 지정된 Output()함수
	{
		cout << "Tracer Output" << endl;
		cout << "Name : " << m_strName << endl;
	}
	
};


int main(void) 
{
	CTracer tr3("한조46",4,6);  //메인함수안은 클래스외부이기때문에 public으로 설정되어 있는 멤버변수만 접근가능.
						  //함수 오버로딩으로 CTracer라는 생성자중, 문자열이 parameter로 들어간 생성자가 호출됨. 
	                      //->name에 한조가 들어가게 됨. 
				  // ->생성자가 private으로 되어 있으면, 클래스외부에서 멤버변수접근이 불가능하여 오류남.
	tr3.Output();  

	
	return 0;
}